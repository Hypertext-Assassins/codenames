[{"/Users/skylar/post-sei/codenames/src/index.js":"1","/Users/skylar/post-sei/codenames/src/theme.js":"2","/Users/skylar/post-sei/codenames/src/App.js":"3","/Users/skylar/post-sei/codenames/src/reportWebVitals.js":"4","/Users/skylar/post-sei/codenames/src/global.js":"5","/Users/skylar/post-sei/codenames/src/pages/LandingPage.jsx":"6","/Users/skylar/post-sei/codenames/src/pages/Game.jsx":"7","/Users/skylar/post-sei/codenames/src/services/words.js":"8","/Users/skylar/post-sei/codenames/src/components/Card.jsx":"9","/Users/skylar/post-sei/codenames/src/components/MapKey.jsx":"10","/Users/skylar/post-sei/codenames/src/components/Score.jsx":"11","/Users/skylar/post-sei/codenames/src/services/socketapi.js":"12"},{"size":852,"mtime":1611437890186,"results":"13","hashOfConfig":"14"},{"size":507,"mtime":1611702967647,"results":"15","hashOfConfig":"14"},{"size":1080,"mtime":1611437890182,"results":"16","hashOfConfig":"14"},{"size":362,"mtime":1611367017419,"results":"17","hashOfConfig":"14"},{"size":555,"mtime":1611437890184,"results":"18","hashOfConfig":"14"},{"size":491,"mtime":1611714698550,"results":"19","hashOfConfig":"14"},{"size":2564,"mtime":1611713839350,"results":"20","hashOfConfig":"14"},{"size":2686,"mtime":1611624458626,"results":"21","hashOfConfig":"14"},{"size":1900,"mtime":1611700709168,"results":"22","hashOfConfig":"14"},{"size":478,"mtime":1611617992710,"results":"23","hashOfConfig":"14"},{"size":1593,"mtime":1611702967645,"results":"24","hashOfConfig":"14"},{"size":341,"mtime":1611710129077,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28","usedDeprecatedRules":"29"},"17hnem2",{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"29"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"29"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"51"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"29"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/skylar/post-sei/codenames/src/index.js",["57","58"],"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport theme from './theme';\nimport {BrowserRouter as Router, Route} from 'react-router-dom'\nimport { ColorModeScript } from '@chakra-ui/react';\n\n\nReactDOM.render(\n  <Router>\n    {/* <ColorModeScript initialColorMode={theme.config.initialColorMode} /> */}\n    <Route component={App}/>\n  </Router>,\n  document.getElementById('root')\n);\n// ReactDOM.render(\n//   <React.StrictMode>\n//     <App />\n//   </React.StrictMode>,\n//   document.getElementById('root')\n// );\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n",["59","60"],"/Users/skylar/post-sei/codenames/src/theme.js",[],"/Users/skylar/post-sei/codenames/src/App.js",[],"/Users/skylar/post-sei/codenames/src/reportWebVitals.js",[],"/Users/skylar/post-sei/codenames/src/global.js",[],"/Users/skylar/post-sei/codenames/src/pages/LandingPage.jsx",[],"/Users/skylar/post-sei/codenames/src/pages/Game.jsx",["61","62"],"import React from 'react'\nimport { useState, useEffect, useRef } from 'react'\nimport * as wordsAPI from '../services/words'\nimport Score from '../components/Score'\nimport Card from '../components/Card'\nimport MapKey from '../components/MapKey'\nimport { Grid, GridItem, Button } from \"@chakra-ui/react\"\n// import {subscribeToTimer} from '../services/socketapi'\n\nconst Game = () => {\n    const [words, setWords] = useState([]);\n    const [score, setScore] = useState({\"red.500\": 0, \"blue.400\": 0, \"white\": 0, \"black\": 0})\n    const [winner, setWinner] = useState(\"\")\n    // const [timestamp, setTimestamp] = useState({timestamp: \"\"})\n\n    const generateWords = async () => {\n        const words = await wordsAPI.generateBoard();\n        setWords(words);\n        setScore({\"red.500\": 0, \"blue.400\": 0, \"white\": 0, \"black\": 0})\n        setWinner(\"\")\n    }\n\n    useEffect(() => {\n        generateWords();\n    },[]);\n\n    const tapCard = async (id, color) => {\n        setWords(words.map(el => el.id === id ? {...el, isTapped:true} : el))\n        setScore({...score, [color]: score[color]+1})\n        checkWin();\n        // subscribeToTimer((err, timestamp) => setTimestamp({timestamp:timestamp}))\n    }\n\n    const checkWin = () => {\n        if (score[\"red.500\"] === 8){\n            setWinner(\"Red Team\")\n        } else if (score[\"blue.400\"] === 9){\n            setWinner(\"Blue Team\")\n        } else if (score.black === 1){\n            setWinner(\"set winner based on which team clicked, after websockets\")\n        }\n    }\n\n    return (  \n        <>\n        \n        <Score \n            score={score}\n            winner={winner}\n        />\n    \n        {words.length ? \n            <Grid templateColumns=\"repeat(5, 1fr)\" templateRows=\"repeat(5, 1fr)\" gap={6}>\n                {words.map(el => \n                    <Card \n                        key={el.id}\n                        id={el.id}\n                        word={el.word}\n                        color={el.color}\n                        isTapped={el.isTapped}\n                        generateWords={generateWords}\n                        tapCard={tapCard}\n                        />\n                )}\n            </Grid>\n            :\n            <div>Generating words... </div>\n        } \n        <br></br>      \n        <Button onClick={generateWords} colorScheme=\"teal\" variant=\"outline\">Reset</Button>\n        <br></br>\n        <br></br>\n        <h1>Codemaster Key - should only be visible to codemasters</h1>\n        <MapKey \n            words={words}\n        />\n        </>\n    );\n}\n \nexport default Game;","/Users/skylar/post-sei/codenames/src/services/words.js",[],"/Users/skylar/post-sei/codenames/src/components/Card.jsx",["63","64","65"],"import React from 'react'\nimport {useState, useEffect} from 'react'\nimport { Box, Button } from '@chakra-ui/react'\n\nconst Card = (props) => {\n\n    // const [color, setColor] = useState(\"gray.400\")\n    // const [isTapped, setIsTapped] = useState(props.isTapped)\n    // // const [colorCount, setColorCount] = useState({\"red.500\": 0, \"blue.400\": 0, \"white\": 0, \"black\": 0})\n    // // const [redCount, setRedCount] = useState(0)\n\n    // // useEffect(()=>{\n    // //     setColor(\"gray.400\")\n    // //     setIsTapped(false)\n    // // }, [props.generateWords])\n\n    // const tapCard = () => {\n    //     if (!isTapped){\n    //         setColor(props.color)\n    //         setIsTapped(true)\n    //         // setColorState(prevColorState => ({\n    //         //     ...prevColorState,\n    //         //     [props.color]: 1\n    //         // }))\n    //         // setRedCount(redCount => redCount +1)\n    //         // console.log(redCount)\n    //         props.setColorCount(props.color);\n    //     } \n    // }\n\n    const handleClick = () => {\n        props.tapCard(props.id, props.color);\n    }\n\n    return (  \n        <div>\n            {props.isTapped ? \n                <Button variant=\"outline\" w=\"100%\" h=\"10\" borderColor={props.color} bg={props.color} onClick={handleClick}>\n                    {props.word}\n                </Button>\n            :\n                <Button variant=\"outline\" w=\"100%\" h=\"10\" borderColor={\"gray.400\"} bg={\"gray.400\"} onClick={handleClick}>\n                    {props.word}\n                </Button>\n            }\n\n            {/* <Button variant=\"outline\" w=\"100%\" h=\"10\" borderColor={color} bg={color} onClick={tapCard}>\n                {props.word}\n            </Button> */}\n\n            {/* <Box as=\"button\" w=\"100%\" h=\"10\" borderWidth=\"2px\" borderColor=\"gray.400\" >\n                {props.word}\n            </Box> */}\n        </div>\n    );\n}\n \nexport default Card;","/Users/skylar/post-sei/codenames/src/components/MapKey.jsx",["66"],"import React from 'react'\nimport { Grid, GridItem, Box} from \"@chakra-ui/react\"\n\n\nconst MapKey = ({words}) => {\n    return (\n        <>\n            <Grid templateColumns=\"repeat(5, 1fr)\" templateRows=\"repeat(5, 1fr)\" gap={1}>\n                {words.map(el => \n                    <Box bg={el.color} textAlign=\"center\" rounded=\"md\" borderColor=\"white\" border=\"1px\">{el.word}</Box>\n                )}\n            </Grid>\n        </>  \n    );\n}\n \nexport default MapKey;",["67","68"],"/Users/skylar/post-sei/codenames/src/components/Score.jsx",["69"],"import {useState} from 'react';\nimport { Box, Spacer, Flex } from \"@chakra-ui/react\"\n\n\nconst Score = (props) => {\n\n    return (  \n        <>\n            <Box className=\"score-board\"  \n                borderRadius=\"lg\" \n                overflow=\"hidden\"\n            >\n                <p>Score component</p>\n                { props.winner ?\n                    <p>Congrats {props.winner} has won!</p>    \n                :\n                    <></>\n                }\n                <Spacer />\n                <Flex>\n                    <Box \n                        bg=\"red.500\"\n                        fontWeight=\"semibold\"\n                        letterSpacing=\"wide\"\n                        fontSize=\"lg\"\n                        m=\"50px\"\n                        p=\"10px\"\n                        boxShadow=\"dark-lg\"\n                        px=\"4\"\n                        borderRadius=\"md\" \n                    >\n                        RED: {props.score[\"red.500\"]}\n                    </Box>\n                    <Spacer />\n                    <Box \n                        bg=\"blue.400\"\n                        fontWeight=\"semibold\"\n                        letterSpacing=\"wide\"\n                        fontSize=\"lg\"\n                        boxShadow=\"dark-lg\"\n                        p=\"10px\"\n                        m=\"50px\"\n                        px=\"4\"\n                        borderRadius=\"md\"\n                    >\n                        BLUE: {props.score[\"blue.400\"]}\n                    </Box>\n                </Flex>\n            </Box>\n        </>\n    );\n}\n \nexport default Score;","/Users/skylar/post-sei/codenames/src/services/socketapi.js",[],{"ruleId":"70","severity":1,"message":"71","line":6,"column":8,"nodeType":"72","messageId":"73","endLine":6,"endColumn":13},{"ruleId":"70","severity":1,"message":"74","line":8,"column":10,"nodeType":"72","messageId":"73","endLine":8,"endColumn":25},{"ruleId":"75","replacedBy":"76"},{"ruleId":"77","replacedBy":"78"},{"ruleId":"70","severity":1,"message":"79","line":2,"column":31,"nodeType":"72","messageId":"73","endLine":2,"endColumn":37},{"ruleId":"70","severity":1,"message":"80","line":7,"column":16,"nodeType":"72","messageId":"73","endLine":7,"endColumn":24},{"ruleId":"70","severity":1,"message":"81","line":2,"column":9,"nodeType":"72","messageId":"73","endLine":2,"endColumn":17},{"ruleId":"70","severity":1,"message":"82","line":2,"column":19,"nodeType":"72","messageId":"73","endLine":2,"endColumn":28},{"ruleId":"70","severity":1,"message":"83","line":3,"column":10,"nodeType":"72","messageId":"73","endLine":3,"endColumn":13},{"ruleId":"70","severity":1,"message":"80","line":2,"column":16,"nodeType":"72","messageId":"73","endLine":2,"endColumn":24},{"ruleId":"75","replacedBy":"84"},{"ruleId":"77","replacedBy":"85"},{"ruleId":"70","severity":1,"message":"81","line":1,"column":9,"nodeType":"72","messageId":"73","endLine":1,"endColumn":17},"no-unused-vars","'theme' is defined but never used.","Identifier","unusedVar","'ColorModeScript' is defined but never used.","no-native-reassign",["86"],"no-negated-in-lhs",["87"],"'useRef' is defined but never used.","'GridItem' is defined but never used.","'useState' is defined but never used.","'useEffect' is defined but never used.","'Box' is defined but never used.",["86"],["87"],"no-global-assign","no-unsafe-negation"]