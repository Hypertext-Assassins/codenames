[{"/Users/skylar/post-sei/codenames/src/index.js":"1","/Users/skylar/post-sei/codenames/src/theme.js":"2","/Users/skylar/post-sei/codenames/src/App.js":"3","/Users/skylar/post-sei/codenames/src/reportWebVitals.js":"4","/Users/skylar/post-sei/codenames/src/global.js":"5","/Users/skylar/post-sei/codenames/src/pages/LandingPage.jsx":"6","/Users/skylar/post-sei/codenames/src/pages/Game.jsx":"7","/Users/skylar/post-sei/codenames/src/services/words.js":"8","/Users/skylar/post-sei/codenames/src/components/Card.jsx":"9","/Users/skylar/post-sei/codenames/src/components/MapKey.jsx":"10","/Users/skylar/post-sei/codenames/src/components/Score.jsx":"11","/Users/skylar/post-sei/codenames/src/services/socketapi.js":"12"},{"size":852,"mtime":1611437890186,"results":"13","hashOfConfig":"14"},{"size":507,"mtime":1611702967647,"results":"15","hashOfConfig":"14"},{"size":1115,"mtime":1611739304635,"results":"16","hashOfConfig":"14"},{"size":362,"mtime":1611367017419,"results":"17","hashOfConfig":"14"},{"size":555,"mtime":1611437890184,"results":"18","hashOfConfig":"14"},{"size":1439,"mtime":1611742388819,"results":"19","hashOfConfig":"14"},{"size":4013,"mtime":1611742398980,"results":"20","hashOfConfig":"14"},{"size":2686,"mtime":1611624458626,"results":"21","hashOfConfig":"14"},{"size":1912,"mtime":1611726053010,"results":"22","hashOfConfig":"14"},{"size":478,"mtime":1611617992710,"results":"23","hashOfConfig":"14"},{"size":1593,"mtime":1611702967645,"results":"24","hashOfConfig":"14"},{"size":467,"mtime":1611728114950,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28","usedDeprecatedRules":"29"},"17hnem2",{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"29"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"29"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"29"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"52"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"29"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},"/Users/skylar/post-sei/codenames/src/index.js",["58","59"],"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport theme from './theme';\nimport {BrowserRouter as Router, Route} from 'react-router-dom'\nimport { ColorModeScript } from '@chakra-ui/react';\n\n\nReactDOM.render(\n  <Router>\n    {/* <ColorModeScript initialColorMode={theme.config.initialColorMode} /> */}\n    <Route component={App}/>\n  </Router>,\n  document.getElementById('root')\n);\n// ReactDOM.render(\n//   <React.StrictMode>\n//     <App />\n//   </React.StrictMode>,\n//   document.getElementById('root')\n// );\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n",["60","61"],"/Users/skylar/post-sei/codenames/src/theme.js",[],"/Users/skylar/post-sei/codenames/src/App.js",[],"/Users/skylar/post-sei/codenames/src/reportWebVitals.js",[],"/Users/skylar/post-sei/codenames/src/global.js",[],"/Users/skylar/post-sei/codenames/src/pages/LandingPage.jsx",["62","63"],"import React, {useEffect, useState} from 'react'\nimport {Link} from 'react-router-dom'\n\nimport io from 'socket.io-client'\nconst socket = io('http://localhost:4000')\n\nconst LandingPage = (props) => {\n\n    const [state, setState] = useState(\"\")\n    const [roomId, setRoomId] = useState(\"\")\n\n    useEffect(() => {\n        // socket.on('connect', () => {\n        //     console.log(`${socket.id} has connected`)\n        //     setState(\"SOCKET IO WORKS FOR THE LANDING PG\")\n        // })\n        socket.on(\"hello\", (arg) => {\n            console.log(arg)\n        })\n    }, [])\n\n    const handleChange = (e) => {\n        setRoomId(e.target.value)\n    }\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        console.log(roomId)\n        socket.emit(\"join room\", roomId)\n        props.history.push(\"/game\")  //wrapping components from app.js with Route from react-router-dom provides a history prop\n    }\n\n    socket.on(\"landing join room\", (roomId) => {\n        console.log(`landing pg app ${socket.id} has joined ${roomId}`)\n        // setPlayers([...players, socket.id])\n    })  \n\n    return (  \n        <>\n        <form onSubmit={handleSubmit}>\n            <input onChange={handleChange}></input>\n            <button type=\"submit\">Enter Room</button>\n        </form>\n        <h1>Codenames Landing Page</h1>\n        <button><Link exact to=\"/game\">Play Codenames</Link></button>\n        </>\n    );\n}\n \nexport default LandingPage;","/Users/skylar/post-sei/codenames/src/pages/Game.jsx",["64","65","66"],"import React from 'react'\nimport { useState, useEffect, useRef } from 'react'\nimport * as wordsAPI from '../services/words'\nimport Score from '../components/Score'\nimport Card from '../components/Card'\nimport MapKey from '../components/MapKey'\nimport { Grid, GridItem, Button } from \"@chakra-ui/react\"\n// import {subscribeToTimer} from '../services/socketapi'\n\nimport {fromSocketAPI} from '../services/socketapi'\nimport io from 'socket.io-client'\nconst socket = io('http://localhost:4000')\n\n\nconst Game = () => {\n    const [words, setWords] = useState([]);\n    const [score, setScore] = useState({\"red.500\": 0, \"blue.400\": 0, \"white\": 0, \"black\": 0})\n    const [winner, setWinner] = useState(\"\")\n    // const [timestamp, setTimestamp] = useState(\"no timestamp yet\")\n    const [state, setState] = useState(\"\")\n    const [test, setTest] = useState(\"\")\n    const [players, setPlayers] = useState([])\n\n    const generateWords = async () => {\n        const words = await wordsAPI.generateBoard();\n        // socket.emit(\"generate words\", words)\n        setWords(words);\n        setScore({\"red.500\": 0, \"blue.400\": 0, \"white\": 0, \"black\": 0})\n        setWinner(\"\")\n    }\n\n    useEffect(() => {\n        generateWords();\n    },[]);\n\n    const tapCard = async (id, color, word) => {\n        setWords(words.map(el => el.id === id ? {...el, isTapped:true} : el))\n        setScore({...score, [color]: score[color]+1})\n        checkWin();\n        // subscribeToTimer(1000, (err, timestamp) => setTimestamp(timestamp))\n        // socket.emit(\"tappedCard\", word)\n        // fromSocketAPI(word);\n        // socket.on(\"card tapped\", data => {\n        //     console.log(\"card tapped\")\n        //     setState(data)\n        // })\n        socket.emit(\"tappedCard\", word)\n    }\n\n    socket.on(\"tappedCard\", word => {\n        console.log(`${word} has been tapped`)\n        setState(word)\n    })\n\n    const testButton = () => {\n        socket.emit(\"helloworld\", \"testing\")\n    }\n\n    socket.on(\"helloworld\", data => {\n        console.log(\"helloworld testing app\")\n        setTest(data)\n    })\n\n    // socket.on(\"generate words\", words => {\n    //     setWords(words)\n    // })\n\n    socket.on(\"game join room\", (roomId) => {\n        console.log(`game app ${socket.id} has joined ${roomId}`)\n        setPlayers([...players, socket.id])\n    })    \n\n\n    const checkWin = () => {\n        if (score[\"red.500\"] === 8){\n            setWinner(\"Red Team\")\n        } else if (score[\"blue.400\"] === 9){\n            setWinner(\"Blue Team\")\n        } else if (score.black === 1){\n            setWinner(\"set winner based on which team clicked, after websockets\")\n        }\n    }\n\n    return (  \n        <>\n        {/* <p>this is a timer: {timestamp}</p> */}\n        <p>here is some state: {state}</p>\n        <Score \n            score={score}\n            winner={winner}\n        />\n        <p>testing some stuff: {test}</p>\n        <Button onClick={testButton}>test</Button>\n\n        {players.length ? \n            players.map(player =>\n            <p>player</p>\n            )\n            :\n            <></>\n        }\n    \n        {words.length ? \n            <Grid templateColumns=\"repeat(5, 1fr)\" templateRows=\"repeat(5, 1fr)\" gap={6}>\n                {words.map(el => \n                    <Card \n                        key={el.id}\n                        id={el.id}\n                        word={el.word}\n                        color={el.color}\n                        isTapped={el.isTapped}\n                        generateWords={generateWords}\n                        tapCard={tapCard}\n                        />\n                )}\n            </Grid>\n            :\n            <div>Generating words... </div>\n        } \n        <br></br>      \n        <Button onClick={generateWords} colorScheme=\"teal\" variant=\"outline\">Reset</Button>\n        <br></br>\n        <br></br>\n        <h1>Codemaster Key - should only be visible to codemasters</h1>\n        <MapKey \n            words={words}\n        />\n        </>\n    );\n}\n \nexport default Game;","/Users/skylar/post-sei/codenames/src/services/words.js",[],"/Users/skylar/post-sei/codenames/src/components/Card.jsx",["67","68","69"],"import React from 'react'\nimport {useState, useEffect} from 'react'\nimport { Box, Button } from '@chakra-ui/react'\n\nconst Card = (props) => {\n\n    // const [color, setColor] = useState(\"gray.400\")\n    // const [isTapped, setIsTapped] = useState(props.isTapped)\n    // // const [colorCount, setColorCount] = useState({\"red.500\": 0, \"blue.400\": 0, \"white\": 0, \"black\": 0})\n    // // const [redCount, setRedCount] = useState(0)\n\n    // // useEffect(()=>{\n    // //     setColor(\"gray.400\")\n    // //     setIsTapped(false)\n    // // }, [props.generateWords])\n\n    // const tapCard = () => {\n    //     if (!isTapped){\n    //         setColor(props.color)\n    //         setIsTapped(true)\n    //         // setColorState(prevColorState => ({\n    //         //     ...prevColorState,\n    //         //     [props.color]: 1\n    //         // }))\n    //         // setRedCount(redCount => redCount +1)\n    //         // console.log(redCount)\n    //         props.setColorCount(props.color);\n    //     } \n    // }\n\n    const handleClick = () => {\n        props.tapCard(props.id, props.color, props.word);\n    }\n\n    return (  \n        <div>\n            {props.isTapped ? \n                <Button variant=\"outline\" w=\"100%\" h=\"10\" borderColor={props.color} bg={props.color} onClick={handleClick}>\n                    {props.word}\n                </Button>\n            :\n                <Button variant=\"outline\" w=\"100%\" h=\"10\" borderColor={\"gray.400\"} bg={\"gray.400\"} onClick={handleClick}>\n                    {props.word}\n                </Button>\n            }\n\n            {/* <Button variant=\"outline\" w=\"100%\" h=\"10\" borderColor={color} bg={color} onClick={tapCard}>\n                {props.word}\n            </Button> */}\n\n            {/* <Box as=\"button\" w=\"100%\" h=\"10\" borderWidth=\"2px\" borderColor=\"gray.400\" >\n                {props.word}\n            </Box> */}\n        </div>\n    );\n}\n \nexport default Card;","/Users/skylar/post-sei/codenames/src/components/MapKey.jsx",["70"],"import React from 'react'\nimport { Grid, GridItem, Box} from \"@chakra-ui/react\"\n\n\nconst MapKey = ({words}) => {\n    return (\n        <>\n            <Grid templateColumns=\"repeat(5, 1fr)\" templateRows=\"repeat(5, 1fr)\" gap={1}>\n                {words.map(el => \n                    <Box bg={el.color} textAlign=\"center\" rounded=\"md\" borderColor=\"white\" border=\"1px\">{el.word}</Box>\n                )}\n            </Grid>\n        </>  \n    );\n}\n \nexport default MapKey;",["71","72"],"/Users/skylar/post-sei/codenames/src/components/Score.jsx",["73"],"import {useState} from 'react';\nimport { Box, Spacer, Flex } from \"@chakra-ui/react\"\n\n\nconst Score = (props) => {\n\n    return (  \n        <>\n            <Box className=\"score-board\"  \n                borderRadius=\"lg\" \n                overflow=\"hidden\"\n            >\n                <p>Score component</p>\n                { props.winner ?\n                    <p>Congrats {props.winner} has won!</p>    \n                :\n                    <></>\n                }\n                <Spacer />\n                <Flex>\n                    <Box \n                        bg=\"red.500\"\n                        fontWeight=\"semibold\"\n                        letterSpacing=\"wide\"\n                        fontSize=\"lg\"\n                        m=\"50px\"\n                        p=\"10px\"\n                        boxShadow=\"dark-lg\"\n                        px=\"4\"\n                        borderRadius=\"md\" \n                    >\n                        RED: {props.score[\"red.500\"]}\n                    </Box>\n                    <Spacer />\n                    <Box \n                        bg=\"blue.400\"\n                        fontWeight=\"semibold\"\n                        letterSpacing=\"wide\"\n                        fontSize=\"lg\"\n                        boxShadow=\"dark-lg\"\n                        p=\"10px\"\n                        m=\"50px\"\n                        px=\"4\"\n                        borderRadius=\"md\"\n                    >\n                        BLUE: {props.score[\"blue.400\"]}\n                    </Box>\n                </Flex>\n            </Box>\n        </>\n    );\n}\n \nexport default Score;","/Users/skylar/post-sei/codenames/src/services/socketapi.js",[],{"ruleId":"74","severity":1,"message":"75","line":6,"column":8,"nodeType":"76","messageId":"77","endLine":6,"endColumn":13},{"ruleId":"74","severity":1,"message":"78","line":8,"column":10,"nodeType":"76","messageId":"77","endLine":8,"endColumn":25},{"ruleId":"79","replacedBy":"80"},{"ruleId":"81","replacedBy":"82"},{"ruleId":"74","severity":1,"message":"83","line":9,"column":12,"nodeType":"76","messageId":"77","endLine":9,"endColumn":17},{"ruleId":"74","severity":1,"message":"84","line":9,"column":19,"nodeType":"76","messageId":"77","endLine":9,"endColumn":27},{"ruleId":"74","severity":1,"message":"85","line":2,"column":31,"nodeType":"76","messageId":"77","endLine":2,"endColumn":37},{"ruleId":"74","severity":1,"message":"86","line":7,"column":16,"nodeType":"76","messageId":"77","endLine":7,"endColumn":24},{"ruleId":"74","severity":1,"message":"87","line":10,"column":9,"nodeType":"76","messageId":"77","endLine":10,"endColumn":22},{"ruleId":"74","severity":1,"message":"88","line":2,"column":9,"nodeType":"76","messageId":"77","endLine":2,"endColumn":17},{"ruleId":"74","severity":1,"message":"89","line":2,"column":19,"nodeType":"76","messageId":"77","endLine":2,"endColumn":28},{"ruleId":"74","severity":1,"message":"90","line":3,"column":10,"nodeType":"76","messageId":"77","endLine":3,"endColumn":13},{"ruleId":"74","severity":1,"message":"86","line":2,"column":16,"nodeType":"76","messageId":"77","endLine":2,"endColumn":24},{"ruleId":"79","replacedBy":"91"},{"ruleId":"81","replacedBy":"92"},{"ruleId":"74","severity":1,"message":"88","line":1,"column":9,"nodeType":"76","messageId":"77","endLine":1,"endColumn":17},"no-unused-vars","'theme' is defined but never used.","Identifier","unusedVar","'ColorModeScript' is defined but never used.","no-native-reassign",["93"],"no-negated-in-lhs",["94"],"'state' is assigned a value but never used.","'setState' is assigned a value but never used.","'useRef' is defined but never used.","'GridItem' is defined but never used.","'fromSocketAPI' is defined but never used.","'useState' is defined but never used.","'useEffect' is defined but never used.","'Box' is defined but never used.",["93"],["94"],"no-global-assign","no-unsafe-negation"]